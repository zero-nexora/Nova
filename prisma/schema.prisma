generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  CASH_ON_DELIVERY
}

enum NotificationType {
  ORDER_UPDATE
  PROMOTION
  ACCOUNT
  SYSTEM
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PRODUCT_RESTOCK
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum RoleName {
  ADMIN
  MANAGE_PRODUCT
  MANAGE_CATEGORY
  MANAGE_STAFF
  MANAGE_ORDER
}

enum PermissionName {
  CREATE_PRODUCT
  READ_PRODUCT
  UPDATE_PRODUCT
  DELETE_PRODUCT

  CREATE_CATEGORY
  READ_CATEGORY
  UPDATE_CATEGORY
  DELETE_CATEGORY

  CREATE_STAFF
  READ_STAFF
  UPDATE_STAFF
  DELETE_STAFF

  CREATE_ORDER
  READ_ORDER
  UPDATE_ORDER
  DELETE_ORDER
}

model Users {
  id            String           @id @default(uuid())
  clerkId       String           @unique
  email         String           @unique
  first_name    String?
  last_name     String?
  image_url     String?
  roles         User_Roles[]
  carts         Carts[]
  orders        Orders[]
  addresses     User_Addresses[]
  reviews       Reviews[]
  wishlists     Wishlists[]
  notifications Notifications[]
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  is_deleted    Boolean          @default(false)
  deleted_at    DateTime?

  @@index([clerkId])
  @@index([email])
}

model Roles {
  id          String             @id @default(uuid())
  name        RoleName           @unique
  description String?
  users       User_Roles[]
  permissions Role_Permissions[]
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt
}

model Permissions {
  id          String             @id @default(uuid())
  name        PermissionName     @unique
  description String?
  roles       Role_Permissions[]
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt
}

model User_Roles {
  id      String @id @default(uuid())
  user    Users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  role    Roles  @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id String

  @@unique([user_id, role_id])
}

model Role_Permissions {
  id            String      @id @default(uuid())
  role          Roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id       String
  permission    Permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  permission_id String

  @@unique([role_id, permission_id])
}

model Categories {
  id            String          @id @default(uuid())
  name          String
  slug          String          @unique
  subcategories Subcategories[] @relation("CategoryToSubcategory")
  products      Products[]      @relation("CategoryToProduct")

  image_url String?
  public_id String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  is_deleted Boolean   @default(false)
  deleted_at DateTime?

  @@index([slug])
}

model Subcategories {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  category_id String
  category    Categories @relation("CategoryToSubcategory", fields: [category_id], references: [id], onDelete: Cascade)
  products    Products[] @relation("SubcategoryToProduct")

  image_url String?
  public_id String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  is_deleted Boolean   @default(false)
  deleted_at DateTime?

  @@index([slug])
  @@index([category_id])
}

model Products {
  id             String             @id @default(uuid())
  name           String
  slug           String             @unique
  description    String?
  category_id    String
  category       Categories         @relation("CategoryToProduct", fields: [category_id], references: [id], onDelete: Cascade)
  subcategory_id String?
  subcategory    Subcategories?     @relation("SubcategoryToProduct", fields: [subcategory_id], references: [id], onDelete: SetNull)
  images         Product_Images[]
  variants       Product_Variants[]
  reviews        Reviews[]
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
  is_deleted     Boolean            @default(false)
  deleted_at     DateTime?

  @@index([slug])
  @@index([category_id])
  @@index([subcategory_id])
}

model Product_Images {
  id         String   @id @default(uuid())
  product_id String
  product    Products @relation(fields: [product_id], references: [id], onDelete: Cascade)

  image_url String
  public_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([product_id])
}

model Product_Variants {
  id             String                       @id @default(uuid())
  product_id     String
  product        Products                     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  sku            String
  slug           String?                      @unique
  price          Float
  stock_quantity Int
  attributes     Product_Variant_Attributes[]
  cartItems      Cart_Items[]
  orderItems     Order_Items[]
  wishlists      Wishlists[]
  created_at     DateTime                     @default(now())
  updated_at     DateTime                     @updatedAt

  @@index([product_id])
  @@index([slug])
}

model Product_Attributes {
  id         String                     @id @default(uuid())
  name       String
  values     Product_Attribute_Values[]
  created_at DateTime                   @default(now())
  updated_at DateTime                   @updatedAt
  is_deleted Boolean                    @default(false)
  deleted_at DateTime?

  @@index([name])
}

model Product_Attribute_Values {
  id            String                       @id @default(uuid())
  attribute_id  String
  attribute     Product_Attributes           @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  value         String
  variantValues Product_Variant_Attributes[]
  created_at    DateTime                     @default(now())
  updated_at    DateTime                     @updatedAt
  is_deleted    Boolean                      @default(false)
  deleted_at    DateTime?

  @@index([attribute_id])
}

model Product_Variant_Attributes {
  id                 String                   @id @default(uuid())
  product_variant_id String
  attribute_value_id String
  productVariant     Product_Variants         @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  attributeValue     Product_Attribute_Values @relation(fields: [attribute_value_id], references: [id], onDelete: Cascade)
  created_at         DateTime                 @default(now())
  updated_at         DateTime                 @updatedAt

  @@index([product_variant_id])
  @@index([attribute_value_id])
  @@index([product_variant_id, attribute_value_id])
}

model Carts {
  id         String       @id @default(uuid())
  user_id    String
  user       Users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items      Cart_Items[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt

  @@index([user_id])
}

model Cart_Items {
  id                 String           @id @default(uuid())
  cart_id            String
  product_variant_id String
  cart               Carts            @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  productVariant     Product_Variants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  quantity           Int
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt

  @@index([cart_id])
  @@index([product_variant_id])
  @@index([cart_id, product_variant_id])
}

model Orders {
  id             String         @id @default(uuid())
  user_id        String
  user           Users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  address_id     String
  address        User_Addresses @relation(fields: [address_id], references: [id], onDelete: Cascade)
  status         OrderStatus
  total_price    Float
  payment_method PaymentMethod
  payment_status PaymentStatus
  items          Order_Items[]
  payments       Payments[]
  coupon_id      String?
  coupon         Coupons?       @relation(fields: [coupon_id], references: [id], onDelete: SetNull)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@index([user_id])
  @@index([address_id])
  @@index([status])
  @@index([payment_method])
  @@index([payment_status])
  @@index([coupon_id])
}

model Order_Items {
  id                 String           @id @default(uuid())
  order_id           String
  product_variant_id String
  order              Orders           @relation(fields: [order_id], references: [id], onDelete: Cascade)
  productVariant     Product_Variants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  quantity           Int
  price              Float
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt

  @@index([order_id])
  @@index([product_variant_id])
  @@index([order_id, product_variant_id])
}

model Payments {
  id             String        @id @default(uuid())
  order_id       String
  order          Orders        @relation(fields: [order_id], references: [id], onDelete: Cascade)
  method         PaymentMethod
  amount         Float
  status         PaymentStatus
  transaction_id String        @unique
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  @@index([order_id])
  @@index([method])
  @@index([status])
  @@index([transaction_id])
}

model Reviews {
  id               String          @id @default(uuid())
  product_id       String
  user_id          String
  user             Users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  rating           Int?
  comment          String?
  parent_review_id String?
  product          Products        @relation(fields: [product_id], references: [id], onDelete: Cascade)
  parentReview     Reviews?        @relation("ReviewReplies", fields: [parent_review_id], references: [id], onDelete: Cascade)
  replies          Reviews[]       @relation("ReviewReplies")
  images           Review_Images[]
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt

  @@index([product_id])
  @@index([user_id])
  @@index([parent_review_id])
}

model Review_Images {
  id         String   @id @default(uuid())
  review_id  String
  review     Reviews  @relation(fields: [review_id], references: [id], onDelete: Cascade)
  image_url  String
  public_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([review_id])
}

model Wishlists {
  id                 String           @id @default(uuid())
  user_id            String
  user               Users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product_variant_id String
  productVariant     Product_Variants @relation(fields: [product_variant_id], references: [id], onDelete: Cascade)
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt

  @@index([user_id])
  @@index([product_variant_id])
  @@index([user_id, product_variant_id])
}

model User_Addresses {
  id          String   @id @default(uuid())
  user_id     String
  user        Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name        String
  phone       String?
  line1       String
  line2       String?
  city        String?
  state       String?
  postal_code String?
  country     String?
  is_default  Boolean  @default(false)
  orders      Orders[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([user_id])
}

model Notifications {
  id         String           @id @default(uuid())
  user_id    String
  user       Users            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  title      String
  content    String
  is_read    Boolean          @default(false)
  type       NotificationType
  link       String?
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@index([user_id])
  @@index([type])
}

model Coupons {
  id               String     @id @default(uuid())
  code             String     @unique
  discount_type    CouponType
  discount_value   Float
  min_order_amount Float?
  max_uses         Int?
  used_count       Int        @default(0)
  start_date       DateTime
  end_date         DateTime
  is_active        Boolean    @default(true)
  orders           Orders[]
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  @@index([code])
  @@index([discount_type])
  @@index([start_date])
  @@index([end_date])
}
